"""
AUTHOR: E Karvelis (karvels2@mit.edu)
DATE:   April 25, 2023

PURPOSE: 
Predict TIS-calculated k_cat values for different enzyme mutants as a 
function of their active site dynamics leading up to attempted turnover
events. Observations of the dynamics leading to, and sometimes including,
attempted turnover are referred to as trajectories or pathways. The 
goal of this script is to train a model that predicts the k_cat for a 
given mutant based on a sampled set of its trajectories.

METHOD:
This script implements a standard transformer encoder, specialized 
for handling multivariate time series data, upstream of a head that 
predicts k_cat from the pooled encodings across a set of input 
trajectories. 

(set of trajectories) >> transformer encoder >> pooling >> prediction head >> k_cat


EXECUTION:
python transformer_1.py config.txt

where the config.txt file specifies all settings. See below for info on each 
setting. An example file might read:

data_file = 'data/tptrue_gsfalse_o-0dot4_0dot8_s1_2_3_4_5_r1_2_t-110_0_sub500_numNone.470000-111-70memnpy'
meta_file = 'data/tptrue_gsfalse_o-0dot4_0dot8_s1_2_3_4_5_r1_2_t-110_0_sub500_numNone.metadata'
loc = '/data/karvelis03/dl_kcat/'
split_by_variant = True
path_set_size = 10
random_seed = 333


DEPENDENCIES:
This script sources the object for structuring metadata, which is defined in 
./scripts/prep_data.py. In practice, this script imports everything from prep_data.py.


INPUT:
data_file --        Name of the data file, which stores a memory-mapped numpy array of
			        the form saved by prep_data.py. This array has form 
			        [pathways, timesteps, features]. (str)
meta_file --        Name of the metadata file, which stores the metadata describing 
			        each pathway entry (along axis 0) of the data_file. The meta_file
			        stores a saved, pickled python object generated by prep_data.py when 
			        saving the corresponding data_file (meta_file will have the same name
			        as its data_file, but the suffix of the data_file is replaced with 
			        '.metadata'). This object is an instance of Recurrent_data as defined in
			        scripts/prep_data.py. It contains information associated with each 
			        pathway along axis 0 of the data_file array: the variant, k_cat, 
			        error in k_cat, pathway type (i.e., order), ensemble seed number, 
			        ensemble statistical replicate number, time steps (along axis 1). (str)
loc --              The pathway to the location of the dl_kcat repo. This script has some 
                    dependencies, all of which it can source form the repo's ./scripts
                    and ./input subfolders. (str)
cv_folds --         The number of cross validation folds to use. Default, 5. int
split_by_variant -- Whether to split the cross validation folds by enzyme variants. 
                    That is, if True, then all the pathway data from a given variant
                    will be in only the train or test set (never both) for a given
                    cross validation fold. Each variant is held out in the test set
                    for only one of the folds. If False, then the pathway data from 
                    a given variant can be distributed between both the train and 
                    test sets for every fold. Generally, we set this arument to True,
                    because we are  interested in how the model will generalize to 
                    new variants whose data on which it hasn't been trained. (bool)
path_set_size --    The number of pathways to include per 'observation' of an enzyme
					variant. That is, the model will predict k_cat from a set of 
					path_set_size number of pathways from a given variant. The model
					architecture will be designed so that it can make this prediction
					for any variable number of pathways, but for training purposes, 
					we select the number of pathways so that the training data can 
					be appropriately packed into 'observations,' where each observation 
					is a small set of pathways. Defaults to 10. int
batch_size --       Size of training batches. Each batch will include batch size number 
                    of variant observations, where each observation is comprised of 
                    path_set_size number of pathways. Default, 32. int
random_seed --      Number with which to intialize the random number generator. int

"""

""" ============================================== """
###                     Packages                   ###
""" ============================================== """
import torch
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import GroupKFold






""" ============================================== """
###          Helper functions and classes (put in another script one day)          ###
""" ============================================== """
class PathDataset():
	# Stores the memory-mapped numpy array and corresponding
	# Recurrent_data object with associated metadata

	def __init__(self, data_file, meta_file=None, path_set_size=10):
		self.data_file = data_file
		self.path_set_size = path_set_size
		if meta_file != None:
			self.meta_file = meta_file
		else:
			suffix = data_file.split('num')[-1].split('.')[-1]
			self.meta_file = data_file.replace(suffix, 'metadata')


		self.data = np.memmap(self.data_file, dtype='float32', mode='r', shape=self.get_data_shape(self.data_file))
		self.meta = pickle.load(open(self.meta_file, 'rb'))
		self.obs = None


	def info(self):
		print ("self.data_file -- name of the file the PathDataset is sourcing a memory-mapped numpy array from")
		print ("self.meta_file -- name of the file the PathDataset is sourcing the meta data from (Recurrent_data object)")
		print ("self.data -- the loaded memory-mapped numpy array")
		print ("self.meta -- the loaded Recurrent_data object with metadata")
		pirnt ("self.obs -- instance of Observations object. Stores indexes for each 'observation' of a mutant")


	@staticmethod
	def get_data_shape(data_file):
		suffix = data_file.split('num')[-1].split('.')[-1]
		shape = np.array(suffix.split('memnpy')[0].split('-'), dtype=int)
		shape = tuple(shape)
		return shape

	def make_observations(self):
		# Populates self.obs with an instance of the Observations class
		# 
		# This creates small groups of pathways, where each pathway
		# in a given group is from the same enzyme variant. Such
		# a group of pathways is called an 'observation' of a variant.
		# 
		# Observations are organized in an instance of the Observations 
		# class stored in self.obs.
		# Each observation has one element in the array self.obs.obs,
		# and that element is an array listing the indexes (along axis 0)
		# of self.data for the pathways belonging to that observation.
		# Also included as part of the self.obs instance are the 
		# self.obs.variant, self.obs.kcat, and self.obs.kcat_sem attibutes, 
		# which are arrays that respectively list the variant, kcat, and 
		# kcat SEM associated with each observation in self.obs.obs. Note 
		# that these attributes of self.obs are redundant in that self 
		# already has attributes containing this kind of information. The 
		# copying of variant and kcat-related metrics to self.obs is for 
		# convenience. If this causes issues later on (memory, general 
		# performance), consider doing away with the redundancy.

		self.obs = self.Observations(self)


	class Observations():
		# Populates an array called self.obs, listing the indexes (along axis 0)
		# of PathDataset.data for the pathways belonging to each observation.
		# Also creates self.variant, self.kcat, and self.kcat_sem attibutes, 
		# which are arrays that respectively list the variant, kcat, and 
		# kcat SEM associated with each observation (each row) in self.obs.
		def __init__(self, PathDataset):
			self.obs = []
			self.variant = []
			self.kcat = []
			self.kcat_sem = []

			for var in np.unique(PathDataset.meta.variant):

				var_paths = np.where(np.array(PathDataset.meta.variant) == var)[0]

				# get kcat-related metadata
				kcat = PathDataset.meta.kcat[var_paths[0]]
				kcat_sem = PathDataset.meta.kcat_sem[var_paths[0]]

				# group variant's paths into a set of 'observations'
				n_obs = int(np.floor(var_paths.shape[0] / PathDataset.path_set_size))
				var_obs = np.random.choice(var_paths, size=(n_obs,PathDataset.path_set_size), replace=False)

				# append observations to list
				self.obs.append(var_obs)

				# add metadata
				self.variant     += [var]     *var_obs.shape[0]
				self.kcat        += [kcat]    *var_obs.shape[0]
				self.kcat_sem    += [kcat_sem]*var_obs.shape[0]

			# convert all data to single numpy arrays
			self.variant = np.array(self.variant)
			self.kcat = np.array(self.kcat)
			self.kcat_sem = np.array(self.kcat_sem)
			self.obs = np.vstack(self.obs)


class NormalScaler():
	# Similar to sklearn's StandardScaler() in that it scales
	# features to have mean=0 and variance=1 by applying 
	# z = (x-u)/s where z is the udpated feature value, x 
	# the original value, u the mean, and s the standard deviation.
	#
	# Given 3D data of form [pathways, timesteps, features], each 
	# feature's u and s are calculated across all timesteps across
	# all paths. So, there are data.shape[2] number of s and u 
	# in total
	# 
	# call .fit() to fit on training data, then
	# call .transform() to scale both training
	# and testing data as needed
	# 
	# Example:
	# scaler = NormalScaler()
	# scaler.fit(data.data)
	# x = data.data[0:3,:,:]
	# x = scaler.transform(x)

	def __init__(self):
		self.avg = None
		self.std = None

	def fit(self, x):
		self.avg = np.mean(np.mean(x, axis=1), axis=0)
		self.std = np.sqrt(  np.mean(np.mean(x**2, axis=1), axis=0) - (self.avg**2) )

	def transform(self, x):
		if not isinstance(self.avg, np.ndarray):
			raise ValueError('NormalScaler instance must first be fit to data before transforming data')

		x = (x - self.avg) / self.std

		return x


class MinMaxScaler():
	# Similar to sklearn's MinMaxScaler() in that it scales
	# features to have range from 0 to 1 by applying 
	# x_scaled = (x - min(x))/(max(x) - min(x)) where x_scaled
	# is the udpated feature value, x  the original value
	#
	# Given 3D data of form [pathways, timesteps, features], each 
	# feature's min and max are taken across all timesteps across
	# all paths. So, there are data.shape[2] number of min and max 
	# in total
	# 
	# call .fit() to fit on training data, then
	# call .transform() to scale both training
	# and testing data as needed

	def __init__(self):
		self.min = None
		self.max = None

	def fit(self, x):
		self.min = np.min(np.min(x, axis=1), axis=0)
		self.max = np.max(np.max(x, axis=1), axis=0)

	def transform(self, x):
		if not isinstance(self.min, np.ndarray):
			raise ValueError('MinMaxScaler instance must first be fit to data before transforming data')

		x = (x - self.min) / (self.max - self.min)

		return x 


class DataScaler():
	# A class that can be passed as the transform argument when 
	# making an instance of PathTorchDataset, enabling the 
	# scaling, or normalization, of data as it is called by 
	# the PyTorch Dataloader.
	# INPUT:
	# scaler -- a MinMaxScaler or NormalScaler instance that has
	#           been fit to some data, which you want to apply
	# OUTPUT -- when __call__(sample) executes, this will apply
	#           the .transform() function of scaler to the data
	#           in sample['paths'], i.e. the pathway data

	def __init__(self, scaler):
		self.scaler = scaler

	def __call__(self, sample):
		paths = scaler.transform(sample['paths'])
		return {'paths': paths, 'kcat': sample['kcat']}



class PathTorchDataset(Dataset):
	# Defines a customized Dataset class for use with 
	# PyTorch based on the standard PyTorch Dataset class
	

	def __init__(self, pathdataset, elligible_idxs=None, transform=None):
		# pathdataset -- an instance of the PathDataset object, with the 
		#                .obs attribute populated (PathDataset)
		# elligible_idxs -- the indexes along the attributes of
		#                   pathdataset.obs that are elligible for 
		#                   selection when loading data. This variable
		#                   is meant to pass the indexes of training or 
		#                   testing data. Default, None, in which case
		#                   all indexes are considered elligible. 
		#    				(numpy array, None).
		# transform -- transform to apply to samples (function, optional)

		self.pathdataset = pathdataset
		self.transform = transform
		if elligible_idxs is None:
			self.elligible_idxs = np.arange(self.pathdataset.obs.obs.shape[0])
		else:
			self.elligible_idxs = elligible_idxs

	def __len__(self):
		return (self.elligible_idxs.shape[0])

	def __getitem__(self, idx):

		# Convert idx to the index along self.path.dataset.obs
		# entries that is elligible for selection
		selected_idx = self.elligible_idxs[idx]

		# Collect paths' data
		path_idxs = self.pathdataset.obs.obs[selected_idx]
		paths = self.pathdataset.data[path_idxs,:,:]

		# Collect kcat value
		kcat = self.pathdataset.obs.kcat[selected_idx]
		# take log bc kcat values span several orders of magnitude
		log_kcat = np.log10(kcat)
		sample = {'paths': paths, 'kcat': log_kcat}

		if self.transform:
			sample = self.transform(sample)

		return sample

		


"""
FOR DATA PIPING

class DataLoader():
	# can probably just use as is already defined in pytorch
	# may look into populating its tranform argument with your
	# pre-fit scaler instances

"""


"""
FOR MODEL

class model():

	# input is a set of trajectories. For example, a small 3D 
	# array, x, with shape like [10, 111, 70]
	[e1, e2, ..., en] = [transformer_encoder(i) for i in x]
	e = pooling([e1, e2, ..., en])
	k = head(e)


class transformer_encoder():

	# creates encoding of invidual time series t of shape
	# [1, 111, 70] using torch.nn.transformerencoder


class head():

	# predicts kcat from pooled embedding (or arbitrary input)
	# using a standard MLP implemented with torch
"""







""" ============================================== """
###                     Main code                  ###
""" ============================================== """
if __name__ == '__main__':


	""" #=============================================					
	        Load settings and set up environment
	""" #=============================================
	import sys

	# read in settings to overwrite defaults
	split_by_variant = True
	random_seed = 333
	path_set_size = 10
	batch_size = 32
	cv_folds = 5
	with open(sys.argv[1], 'r') as f:
		settings = f.read()
		exec(settings)

	# import dependencies from prep_data.py
	sys.path.append(f'{loc}/scripts/')
	from prep_data import *

	# initialize random number generator
	np.random.seed(random_seed)


	""" #=============================================
	                       Load data
	""" #=============================================
	data = PathDataset(data_file, meta_file)
	# group pathways into small sets (from same variant)
	data.make_observations()


	# create Dataset for use with PyTorch
	# torch_data = PathTorchDataset(data)
	# dataloader = DataLoader(torch_data, batch_size=batch_size, shuffle=True)

	# for batch_idx, batch in enumerate(dataloader):
	# 	print (batch_idx, batch['paths'].shape, batch['kcat'])

	# 	if batch_idx == 5:
	# 		break



	
	""" #=============================================
                        Cross-validation loop
	""" #=============================================
	# define CV splitter
	cv = GroupKFold(n_splits=cv_folds)
	for i, (train_idx, test_idx) in enumerate(cv.split(np.arange(data.obs.obs.shape[0]), groups=data.obs.variant)):


		# Fit the scaler to the training data
		scaler = NormalScaler()
		scaler.fit(data.data[np.concatenate(data.obs.obs[train_idx]),:,:])
		data_scaler = DataScaler(scaler)
		print ('\n\n\n\n Finished fitting SCALER \n\n\n\n')

		
		# Define datasets and dataloaders for train and test sets
		train_dataset = PathTorchDataset(data, elligible_idxs=train_idx, transform=data_scaler)
		test_dataset  = PathTorchDataset(data, elligible_idxs=test_idx, transform=data_scaler)

		train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
		test_loader  = DataLoader(test_dataset, batch_size=batch_size, shuffle=True)


		for batch_idx, batch in enumerate(train_loader):
			print (batch_idx, batch['paths'], batch['kcat'])

			if batch_idx == 3:
				break

		for batch_idx, batch in enumerate(test_loader):
			print (batch_idx, batch['paths'], batch['kcat'])

			if batch_idx == 3:
				break

		print (1/0)






	print ('DONE')



	"""
	Psuedo code:
	for train, test in cv_splits():
		
		# set up a scaler fit to training data
		scaler.fit(training_data)
	
		# Set up dataloaders for train and test sets.
		# These dataloaders can apply the scaler themselves, 
		# or you can do it yourself after they provide data
		train_dataloader = DataLoader(train)
		test_dataloader = DataLoader(test)

		# Set up a fresh new instance of the model
		model = model()

		for epoch in epochs:
			for batch in train_dataloader:
				
				[transform batch with scaler, if needed]

				model.train(batch)
				model.update()

		# evaluate model on test set
		[transform test data with scaler, if needed]
		model.score(test)
		scores.append(score)


	"""






